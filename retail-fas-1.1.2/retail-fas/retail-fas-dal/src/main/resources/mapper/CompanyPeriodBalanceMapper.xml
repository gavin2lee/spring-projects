<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wonhigh.retail.fas.dal.database.CompanyPeriodBalanceMapper" >
  <resultMap id="BaseResultMap" type="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    <id column="id" property="id" jdbcType="CHAR" />
    <result column="company_no" property="companyNo" jdbcType="CHAR" />
    <result column="year" property="year" jdbcType="CHAR" />
    <result column="month" property="month" jdbcType="CHAR" />
    <result column="item_no" property="itemNo" jdbcType="CHAR" />
    <result column="item_code" property="itemCode" jdbcType="VARCHAR" />
    <result column="item_name" property="itemName" jdbcType="VARCHAR" />
    <result column="brand_no" property="brandNo" jdbcType="CHAR" />
    <result column="brand_unit_no" property="brandUnitNo" jdbcType="CHAR" />
    <result column="brand_unit_name" property="brandUnitName" jdbcType="VARCHAR" />
    <result column="category_no" property="categoryNo" jdbcType="CHAR" />
    <result column="opening_qty" property="openingQty" jdbcType="INTEGER" />
    <result column="opening_balance" property="openingBalance" jdbcType="DECIMAL" />
    <result column="purchase_in_qty" property="purchaseInQty" jdbcType="INTEGER" />
    <result column="purchase_in_amount" property="purchaseInAmount" jdbcType="DECIMAL" />
    <result column="outer_transfer_in_qty" property="outerTransferInQty" jdbcType="INTEGER" />
    <result column="outer_transfer_in_amount" property="outerTransferInAmount" jdbcType="DECIMAL" />
    <result column="purchase_return_qty" property="purchaseReturnQty" jdbcType="INTEGER" />
    <result column="purchase_return_amount" property="purchaseReturnAmount" jdbcType="DECIMAL" />
    <result column="inv_surplus_qty" property="invSurplusQty" jdbcType="INTEGER" />
    <result column="inv_surplus_amount" property="invSurplusAmount" jdbcType="DECIMAL" />
    <result column="others_in_qty" property="othersInQty" jdbcType="INTEGER" />
    <result column="others_in_amount" property="othersInAmount" jdbcType="DECIMAL" />
    <result column="outer_way_qty" property="outerWayQty" jdbcType="INTEGER" />
    <result column="outer_way_amount" property="outerWayAmount" jdbcType="DECIMAL" />
    <result column="outer_diff_qty" property="outerDiffQty" jdbcType="INTEGER" />
    <result column="outer_diff_amount" property="outerDiffAmount" jdbcType="DECIMAL" />
    <result column="cost_adjustment_amount" property="costAdjustmentAmount" jdbcType="DECIMAL" />
    <result column="sales_out_qty" property="salesOutQty" jdbcType="INTEGER" />
    <result column="sales_out_amount" property="salesOutAmount" jdbcType="DECIMAL" />
    <result column="outer_transfer_out_qty" property="outerTransferOutQty" jdbcType="INTEGER" />
    <result column="outer_transfer_out_amount" property="outerTransferOutAmount" jdbcType="DECIMAL" />
    <result column="inventory_loss_qty" property="inventoryLossQty" jdbcType="INTEGER" />
    <result column="inventory_loss_amount" property="inventoryLossAmount" jdbcType="DECIMAL" />
    <result column="others_out_qty" property="othersOutQty" jdbcType="INTEGER" />
    <result column="others_out_amount" property="othersOutAmount" jdbcType="DECIMAL" />
    <result column="during_net_qty" property="duringNetQty" jdbcType="INTEGER" />
    <result column="during_net_amount" property="duringNetAmount" jdbcType="DECIMAL" />
    <result column="closing_qty" property="closingQty" jdbcType="INTEGER" />
    <result column="closing_balance" property="closingBalance" jdbcType="DECIMAL" />
    <result column="unit_cost" property="unitCost" jdbcType="DECIMAL" />
    <result column="region_cost" property="regionCost" jdbcType="DECIMAL" />
    <result column="headquarter_cost" property="headquarterCost" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="sharding_flag" property="shardingFlag" jdbcType="CHAR" />
    
    <result column="during_net_inventory_qty" property="duringNetInventoryQty" jdbcType="INTEGER" />
    <result column="during_net_inventory_amount" property="duringNetInventoryAmount" jdbcType="DECIMAL" />
    
    <result column="pre_sum_owe_qty" property="preSumOweQty" jdbcType="INTEGER" />
    <result column="pre_accounting_qty" property="preAccountingQty" jdbcType="INTEGER" />
    <result column="pre_sum_owe_amount" property="preSumOweAmount" jdbcType="DECIMAL" />
    <result column="pre_accounting_amount" property="preAccountingAmount" jdbcType="DECIMAL" />
    <result column="curr_sum_owe_qty" property="currSumOweQty" jdbcType="INTEGER" />
    <result column="curr_accounting_qty" property="currAccountingQty" jdbcType="INTEGER" />
    <result column="curr_sum_owe_amount" property="currSumOweAmount" jdbcType="DECIMAL" />
    <result column="curr_accounting_amount" property="currAccountingAmount" jdbcType="DECIMAL" />
    <result column="weighted_difference" property="weightedDifference" jdbcType="DECIMAL" />
    <result column="closing_balance_reference" property="closingBalanceReference" jdbcType="DECIMAL" />
    
    <result column="sales_sum_qty" property="salesSumQty" jdbcType="INTEGER" />
    <result column="sales_sum_amount" property="salesSumAmount" jdbcType="DECIMAL" />
    
  </resultMap>
  <sql id="Base_Column_List" >
    id, company_no, year, month, item_no, item_code, item_name, brand_no, category_no, 
    opening_qty, opening_balance, purchase_in_qty, purchase_in_amount, outer_transfer_in_qty, 
    outer_transfer_in_amount, purchase_return_qty, purchase_return_amount, inv_surplus_qty, 
    inv_surplus_amount, others_in_qty, others_in_amount, outer_way_qty, outer_way_amount, 
    outer_diff_qty, outer_diff_amount, cost_adjustment_amount, sales_out_qty, sales_out_amount, 
    outer_transfer_out_qty, outer_transfer_out_amount, inventory_loss_qty, inventory_loss_amount, 
    others_out_qty, others_out_amount, during_net_qty, during_net_amount, closing_qty, 
    closing_balance, unit_cost, region_cost, headquarter_cost, create_time, create_user, 
    update_time, update_user, sharding_flag
  </sql>
  <sql id="condition" >
    <if test="null!=params" >
      <if test="null!=params.queryCondition and ''!=params.queryCondition" >
        ${params.queryCondition}
      </if>
      <if test="null!=params.shardingFlag and ''!=params.shardingFlag">
		   AND sharding_flag = #{params.shardingFlag,jdbcType=VARCHAR}
	  </if>
      <if test="null!=params.companyNo and ''!=params.companyNo">
		   AND company_no = #{params.companyNo,jdbcType=CHAR}
	  </if>
	  <if test="null!=params.year and ''!=params.year">
		   AND year = #{params.year,jdbcType=CHAR}
	  </if>
	  <if test="null!=params.month and ''!=params.month">
		   AND month = #{params.month,jdbcType=CHAR}
	  </if>
	  <if test="null != params.brandNos and '' != params.brandNos">
		   AND brand_no in 
		    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
				#{brandNo}  
			</foreach>  
	   </if>
	   <if test="null != params.multiCategorys and '' != params.multiCategorys">
		   AND substring(category_no,1,2) in 
			<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
			    #{categoryNo} 
			 </foreach>  
	  </if>
      <if test="null!=params.itemNo and ''!=params.itemNo">
		   AND item_no = #{params.itemNo,jdbcType=CHAR}
	  </if>
	  <if test="null != params.itemNos and '' != params.itemNos">
		   AND item_no in 
		    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
				#{itemNo}  
			</foreach>  
	   </if>
    </if>
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM company_period_balance
    WHERE id = #{id,jdbcType=CHAR}
  </select>
  <select id="selectCount" resultType="java.lang.Integer" >
    SELECT COUNT(1) as s FROM company_period_balance WHERE 1=1 
    <include refid="condition" />
  </select>
  <select id="selectByPage" resultMap="BaseResultMap" parameterType="map" >
    SELECT 
    <include refid="Base_Column_List" />
     FROM company_period_balance WHERE 1=1 
    <include refid="condition" />
    <if test="orderByField != null and ''!=orderByField" >
      ORDER BY ${orderByField}
      <if test="orderByField" >
        ${orderBy}
      </if>
    </if>
     LIMIT #{page.startRowNum} ,#{page.pageSize} 
  </select>
  <select id="selectByParams" resultMap="BaseResultMap" parameterType="map" >
    SELECT 
    <include refid="Base_Column_List" />
     FROM company_period_balance WHERE 1=1 
    <include refid="condition" />
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    DELETE FROM company_period_balance
    WHERE id = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByPrimarayKeyForModel" parameterType="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    DELETE FROM company_period_balance
    WHERE id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    INSERT INTO company_period_balance (id, company_no, year, month, 
      item_no, item_code, item_name, 
      brand_no, category_no, opening_qty, 
      opening_balance, purchase_in_qty, purchase_in_amount, 
      outer_transfer_in_qty, outer_transfer_in_amount, 
      purchase_return_qty, purchase_return_amount, 
      inv_surplus_qty, inv_surplus_amount, others_in_qty, 
      others_in_amount, outer_way_qty, outer_way_amount, 
      outer_diff_qty, outer_diff_amount, cost_adjustment_amount, 
      sales_out_qty, sales_out_amount, outer_transfer_out_qty, 
      outer_transfer_out_amount, inventory_loss_qty, 
      inventory_loss_amount, others_out_qty, others_out_amount, 
      during_net_qty, during_net_amount, closing_qty, 
      closing_balance, unit_cost, region_cost, 
      headquarter_cost, create_time, create_user, 
      update_time, update_user, sharding_flag
      )
    VALUES (#{id,jdbcType=CHAR}, #{companyNo,jdbcType=CHAR}, #{year,jdbcType=CHAR}, #{month,jdbcType=CHAR}, 
      #{itemNo,jdbcType=CHAR}, #{itemCode,jdbcType=VARCHAR}, #{itemName,jdbcType=VARCHAR}, 
      #{brandNo,jdbcType=CHAR}, #{categoryNo,jdbcType=CHAR}, #{openingQty,jdbcType=INTEGER}, 
      #{openingBalance,jdbcType=DECIMAL}, #{purchaseInQty,jdbcType=INTEGER}, #{purchaseInAmount,jdbcType=DECIMAL}, 
      #{outerTransferInQty,jdbcType=INTEGER}, #{outerTransferInAmount,jdbcType=DECIMAL}, 
      #{purchaseReturnQty,jdbcType=INTEGER}, #{purchaseReturnAmount,jdbcType=DECIMAL}, 
      #{invSurplusQty,jdbcType=INTEGER}, #{invSurplusAmount,jdbcType=DECIMAL}, #{othersInQty,jdbcType=INTEGER}, 
      #{othersInAmount,jdbcType=DECIMAL}, #{outerWayQty,jdbcType=INTEGER}, #{outerWayAmount,jdbcType=DECIMAL}, 
      #{outerDiffQty,jdbcType=INTEGER}, #{outerDiffAmount,jdbcType=DECIMAL}, #{costAdjustmentAmount,jdbcType=DECIMAL}, 
      #{salesOutQty,jdbcType=INTEGER}, #{salesOutAmount,jdbcType=DECIMAL}, #{outerTransferOutQty,jdbcType=INTEGER}, 
      #{outerTransferOutAmount,jdbcType=DECIMAL}, #{inventoryLossQty,jdbcType=INTEGER}, 
      #{inventoryLossAmount,jdbcType=DECIMAL}, #{othersOutQty,jdbcType=INTEGER}, #{othersOutAmount,jdbcType=DECIMAL}, 
      #{duringNetQty,jdbcType=INTEGER}, #{duringNetAmount,jdbcType=DECIMAL}, #{closingQty,jdbcType=INTEGER}, 
      #{closingBalance,jdbcType=DECIMAL}, #{unitCost,jdbcType=DECIMAL}, #{regionCost,jdbcType=DECIMAL}, 
      #{headquarterCost,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=VARCHAR}, #{shardingFlag,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    INSERT INTO company_period_balance
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="companyNo != null" >
        company_no,
      </if>
      <if test="year != null" >
        year,
      </if>
      <if test="month != null" >
        month,
      </if>
      <if test="itemNo != null" >
        item_no,
      </if>
      <if test="itemCode != null" >
        item_code,
      </if>
      <if test="itemName != null" >
        item_name,
      </if>
      <if test="brandNo != null" >
        brand_no,
      </if>
      <if test="categoryNo != null" >
        category_no,
      </if>
      <if test="openingQty != null" >
        opening_qty,
      </if>
      <if test="openingBalance != null" >
        opening_balance,
      </if>
      <if test="purchaseInQty != null" >
        purchase_in_qty,
      </if>
      <if test="purchaseInAmount != null" >
        purchase_in_amount,
      </if>
      <if test="outerTransferInQty != null" >
        outer_transfer_in_qty,
      </if>
      <if test="outerTransferInAmount != null" >
        outer_transfer_in_amount,
      </if>
      <if test="purchaseReturnQty != null" >
        purchase_return_qty,
      </if>
      <if test="purchaseReturnAmount != null" >
        purchase_return_amount,
      </if>
      <if test="invSurplusQty != null" >
        inv_surplus_qty,
      </if>
      <if test="invSurplusAmount != null" >
        inv_surplus_amount,
      </if>
      <if test="othersInQty != null" >
        others_in_qty,
      </if>
      <if test="othersInAmount != null" >
        others_in_amount,
      </if>
      <if test="outerWayQty != null" >
        outer_way_qty,
      </if>
      <if test="outerWayAmount != null" >
        outer_way_amount,
      </if>
      <if test="outerDiffQty != null" >
        outer_diff_qty,
      </if>
      <if test="outerDiffAmount != null" >
        outer_diff_amount,
      </if>
      <if test="costAdjustmentAmount != null" >
        cost_adjustment_amount,
      </if>
      <if test="salesOutQty != null" >
        sales_out_qty,
      </if>
      <if test="salesOutAmount != null" >
        sales_out_amount,
      </if>
      <if test="outerTransferOutQty != null" >
        outer_transfer_out_qty,
      </if>
      <if test="outerTransferOutAmount != null" >
        outer_transfer_out_amount,
      </if>
      <if test="inventoryLossQty != null" >
        inventory_loss_qty,
      </if>
      <if test="inventoryLossAmount != null" >
        inventory_loss_amount,
      </if>
      <if test="othersOutQty != null" >
        others_out_qty,
      </if>
      <if test="othersOutAmount != null" >
        others_out_amount,
      </if>
      <if test="duringNetQty != null" >
        during_net_qty,
      </if>
      <if test="duringNetAmount != null" >
        during_net_amount,
      </if>
      <if test="closingQty != null" >
        closing_qty,
      </if>
      <if test="closingBalance != null" >
        closing_balance,
      </if>
      <if test="unitCost != null" >
        unit_cost,
      </if>
      <if test="regionCost != null" >
        region_cost,
      </if>
      <if test="headquarterCost != null" >
        headquarter_cost,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="shardingFlag != null" >
        sharding_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="companyNo != null" >
        #{companyNo,jdbcType=CHAR},
      </if>
      <if test="year != null" >
        #{year,jdbcType=CHAR},
      </if>
      <if test="month != null" >
        #{month,jdbcType=CHAR},
      </if>
      <if test="itemNo != null" >
        #{itemNo,jdbcType=CHAR},
      </if>
      <if test="itemCode != null" >
        #{itemCode,jdbcType=VARCHAR},
      </if>
      <if test="itemName != null" >
        #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="brandNo != null" >
        #{brandNo,jdbcType=CHAR},
      </if>
      <if test="categoryNo != null" >
        #{categoryNo,jdbcType=CHAR},
      </if>
      <if test="openingQty != null" >
        #{openingQty,jdbcType=INTEGER},
      </if>
      <if test="openingBalance != null" >
        #{openingBalance,jdbcType=DECIMAL},
      </if>
      <if test="purchaseInQty != null" >
        #{purchaseInQty,jdbcType=INTEGER},
      </if>
      <if test="purchaseInAmount != null" >
        #{purchaseInAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerTransferInQty != null" >
        #{outerTransferInQty,jdbcType=INTEGER},
      </if>
      <if test="outerTransferInAmount != null" >
        #{outerTransferInAmount,jdbcType=DECIMAL},
      </if>
      <if test="purchaseReturnQty != null" >
        #{purchaseReturnQty,jdbcType=INTEGER},
      </if>
      <if test="purchaseReturnAmount != null" >
        #{purchaseReturnAmount,jdbcType=DECIMAL},
      </if>
      <if test="invSurplusQty != null" >
        #{invSurplusQty,jdbcType=INTEGER},
      </if>
      <if test="invSurplusAmount != null" >
        #{invSurplusAmount,jdbcType=DECIMAL},
      </if>
      <if test="othersInQty != null" >
        #{othersInQty,jdbcType=INTEGER},
      </if>
      <if test="othersInAmount != null" >
        #{othersInAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerWayQty != null" >
        #{outerWayQty,jdbcType=INTEGER},
      </if>
      <if test="outerWayAmount != null" >
        #{outerWayAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerDiffQty != null" >
        #{outerDiffQty,jdbcType=INTEGER},
      </if>
      <if test="outerDiffAmount != null" >
        #{outerDiffAmount,jdbcType=DECIMAL},
      </if>
      <if test="costAdjustmentAmount != null" >
        #{costAdjustmentAmount,jdbcType=DECIMAL},
      </if>
      <if test="salesOutQty != null" >
        #{salesOutQty,jdbcType=INTEGER},
      </if>
      <if test="salesOutAmount != null" >
        #{salesOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerTransferOutQty != null" >
        #{outerTransferOutQty,jdbcType=INTEGER},
      </if>
      <if test="outerTransferOutAmount != null" >
        #{outerTransferOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="inventoryLossQty != null" >
        #{inventoryLossQty,jdbcType=INTEGER},
      </if>
      <if test="inventoryLossAmount != null" >
        #{inventoryLossAmount,jdbcType=DECIMAL},
      </if>
      <if test="othersOutQty != null" >
        #{othersOutQty,jdbcType=INTEGER},
      </if>
      <if test="othersOutAmount != null" >
        #{othersOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="duringNetQty != null" >
        #{duringNetQty,jdbcType=INTEGER},
      </if>
      <if test="duringNetAmount != null" >
        #{duringNetAmount,jdbcType=DECIMAL},
      </if>
      <if test="closingQty != null" >
        #{closingQty,jdbcType=INTEGER},
      </if>
      <if test="closingBalance != null" >
        #{closingBalance,jdbcType=DECIMAL},
      </if>
      <if test="unitCost != null" >
        #{unitCost,jdbcType=DECIMAL},
      </if>
      <if test="regionCost != null" >
        #{regionCost,jdbcType=DECIMAL},
      </if>
      <if test="headquarterCost != null" >
        #{headquarterCost,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="shardingFlag != null" >
        #{shardingFlag,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    UPDATE company_period_balance
    <set >
      <if test="companyNo != null" >
        company_no = #{companyNo,jdbcType=CHAR},
      </if>
      <if test="year != null" >
        year = #{year,jdbcType=CHAR},
      </if>
      <if test="month != null" >
        month = #{month,jdbcType=CHAR},
      </if>
      <if test="itemNo != null" >
        item_no = #{itemNo,jdbcType=CHAR},
      </if>
      <if test="itemCode != null" >
        item_code = #{itemCode,jdbcType=VARCHAR},
      </if>
      <if test="itemName != null" >
        item_name = #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="brandNo != null" >
        brand_no = #{brandNo,jdbcType=CHAR},
      </if>
      <if test="categoryNo != null" >
        category_no = #{categoryNo,jdbcType=CHAR},
      </if>
      <if test="openingQty != null" >
        opening_qty = #{openingQty,jdbcType=INTEGER},
      </if>
      <if test="openingBalance != null" >
        opening_balance = #{openingBalance,jdbcType=DECIMAL},
      </if>
      <if test="purchaseInQty != null" >
        purchase_in_qty = #{purchaseInQty,jdbcType=INTEGER},
      </if>
      <if test="purchaseInAmount != null" >
        purchase_in_amount = #{purchaseInAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerTransferInQty != null" >
        outer_transfer_in_qty = #{outerTransferInQty,jdbcType=INTEGER},
      </if>
      <if test="outerTransferInAmount != null" >
        outer_transfer_in_amount = #{outerTransferInAmount,jdbcType=DECIMAL},
      </if>
      <if test="purchaseReturnQty != null" >
        purchase_return_qty = #{purchaseReturnQty,jdbcType=INTEGER},
      </if>
      <if test="purchaseReturnAmount != null" >
        purchase_return_amount = #{purchaseReturnAmount,jdbcType=DECIMAL},
      </if>
      <if test="invSurplusQty != null" >
        inv_surplus_qty = #{invSurplusQty,jdbcType=INTEGER},
      </if>
      <if test="invSurplusAmount != null" >
        inv_surplus_amount = #{invSurplusAmount,jdbcType=DECIMAL},
      </if>
      <if test="othersInQty != null" >
        others_in_qty = #{othersInQty,jdbcType=INTEGER},
      </if>
      <if test="othersInAmount != null" >
        others_in_amount = #{othersInAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerWayQty != null" >
        outer_way_qty = #{outerWayQty,jdbcType=INTEGER},
      </if>
      <if test="outerWayAmount != null" >
        outer_way_amount = #{outerWayAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerDiffQty != null" >
        outer_diff_qty = #{outerDiffQty,jdbcType=INTEGER},
      </if>
      <if test="outerDiffAmount != null" >
        outer_diff_amount = #{outerDiffAmount,jdbcType=DECIMAL},
      </if>
      <if test="costAdjustmentAmount != null" >
        cost_adjustment_amount = #{costAdjustmentAmount,jdbcType=DECIMAL},
      </if>
      <if test="salesOutQty != null" >
        sales_out_qty = #{salesOutQty,jdbcType=INTEGER},
      </if>
      <if test="salesOutAmount != null" >
        sales_out_amount = #{salesOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="outerTransferOutQty != null" >
        outer_transfer_out_qty = #{outerTransferOutQty,jdbcType=INTEGER},
      </if>
      <if test="outerTransferOutAmount != null" >
        outer_transfer_out_amount = #{outerTransferOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="inventoryLossQty != null" >
        inventory_loss_qty = #{inventoryLossQty,jdbcType=INTEGER},
      </if>
      <if test="inventoryLossAmount != null" >
        inventory_loss_amount = #{inventoryLossAmount,jdbcType=DECIMAL},
      </if>
      <if test="othersOutQty != null" >
        others_out_qty = #{othersOutQty,jdbcType=INTEGER},
      </if>
      <if test="othersOutAmount != null" >
        others_out_amount = #{othersOutAmount,jdbcType=DECIMAL},
      </if>
      <if test="duringNetQty != null" >
        during_net_qty = #{duringNetQty,jdbcType=INTEGER},
      </if>
      <if test="duringNetAmount != null" >
        during_net_amount = #{duringNetAmount,jdbcType=DECIMAL},
      </if>
      <if test="closingQty != null" >
        closing_qty = #{closingQty,jdbcType=INTEGER},
      </if>
      <if test="closingBalance != null" >
        closing_balance = #{closingBalance,jdbcType=DECIMAL},
      </if>
      <if test="unitCost != null" >
        unit_cost = #{unitCost,jdbcType=DECIMAL},
      </if>
      <if test="regionCost != null" >
        region_cost = #{regionCost,jdbcType=DECIMAL},
      </if>
      <if test="headquarterCost != null" >
        headquarter_cost = #{headquarterCost,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="shardingFlag != null" >
        sharding_flag = #{shardingFlag,jdbcType=CHAR},
      </if>
    </set>
    WHERE id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.wonhigh.retail.fas.common.model.CompanyPeriodBalance" >
    UPDATE company_period_balance
    SET company_no = #{companyNo,jdbcType=CHAR},
      year = #{year,jdbcType=CHAR},
      month = #{month,jdbcType=CHAR},
      item_no = #{itemNo,jdbcType=CHAR},
      item_code = #{itemCode,jdbcType=VARCHAR},
      item_name = #{itemName,jdbcType=VARCHAR},
      brand_no = #{brandNo,jdbcType=CHAR},
      category_no = #{categoryNo,jdbcType=CHAR},
      opening_qty = #{openingQty,jdbcType=INTEGER},
      opening_balance = #{openingBalance,jdbcType=DECIMAL},
      purchase_in_qty = #{purchaseInQty,jdbcType=INTEGER},
      purchase_in_amount = #{purchaseInAmount,jdbcType=DECIMAL},
      outer_transfer_in_qty = #{outerTransferInQty,jdbcType=INTEGER},
      outer_transfer_in_amount = #{outerTransferInAmount,jdbcType=DECIMAL},
      purchase_return_qty = #{purchaseReturnQty,jdbcType=INTEGER},
      purchase_return_amount = #{purchaseReturnAmount,jdbcType=DECIMAL},
      inv_surplus_qty = #{invSurplusQty,jdbcType=INTEGER},
      inv_surplus_amount = #{invSurplusAmount,jdbcType=DECIMAL},
      others_in_qty = #{othersInQty,jdbcType=INTEGER},
      others_in_amount = #{othersInAmount,jdbcType=DECIMAL},
      outer_way_qty = #{outerWayQty,jdbcType=INTEGER},
      outer_way_amount = #{outerWayAmount,jdbcType=DECIMAL},
      outer_diff_qty = #{outerDiffQty,jdbcType=INTEGER},
      outer_diff_amount = #{outerDiffAmount,jdbcType=DECIMAL},
      cost_adjustment_amount = #{costAdjustmentAmount,jdbcType=DECIMAL},
      sales_out_qty = #{salesOutQty,jdbcType=INTEGER},
      sales_out_amount = #{salesOutAmount,jdbcType=DECIMAL},
      outer_transfer_out_qty = #{outerTransferOutQty,jdbcType=INTEGER},
      outer_transfer_out_amount = #{outerTransferOutAmount,jdbcType=DECIMAL},
      inventory_loss_qty = #{inventoryLossQty,jdbcType=INTEGER},
      inventory_loss_amount = #{inventoryLossAmount,jdbcType=DECIMAL},
      others_out_qty = #{othersOutQty,jdbcType=INTEGER},
      others_out_amount = #{othersOutAmount,jdbcType=DECIMAL},
      during_net_qty = #{duringNetQty,jdbcType=INTEGER},
      during_net_amount = #{duringNetAmount,jdbcType=DECIMAL},
      closing_qty = #{closingQty,jdbcType=INTEGER},
      closing_balance = #{closingBalance,jdbcType=DECIMAL},
      unit_cost = #{unitCost,jdbcType=DECIMAL},
      region_cost = #{regionCost,jdbcType=DECIMAL},
      headquarter_cost = #{headquarterCost,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      sharding_flag = #{shardingFlag,jdbcType=CHAR}
    WHERE id = #{id,jdbcType=CHAR}
  </update>
  
   <select id="getCompanyPeriodByPage" resultMap="BaseResultMap" parameterType="map" >
	SELECT T.*,
	IFNULL(L.sum_owe_qty, 0) AS pre_sum_owe_qty,IFNULL(L.sum_owe_cost, 0) AS pre_sum_owe_amount,
	T.opening_qty-IFNULL(L.sum_owe_qty, 0) AS pre_accounting_qty, T.opening_balance-IFNULL(L.sum_owe_cost, 0) AS pre_accounting_amount,
	IFNULL(M.sum_owe_qty, 0) AS curr_sum_owe_qty,IFNULL(M.sum_owe_cost, 0) AS curr_sum_owe_amount,
	T.closing_qty-IFNULL(M.sum_owe_qty, 0) AS curr_accounting_qty, T.closing_balance-IFNULL(M.sum_owe_cost, 0) AS curr_accounting_amount,
	IFNULL(cmss.qty,0) - T.others_out_qty_temp AS sales_sum_qty, IFNULL(cmss.unit_cost,0) - T.others_out_amount_temp AS sales_sum_amount
	FROM 
	(
		SELECT p.id, p.company_no, p.year, p.month, p.item_no, p.item_code, p.item_name, p.brand_no,
			bu.brand_unit_no,bu.name brand_unit_name, p.category_no, 
		    p.opening_qty, p.opening_balance, p.purchase_in_qty, p.purchase_in_amount, p.outer_transfer_in_qty, 
		    p.outer_transfer_in_amount, p.purchase_return_qty, p.purchase_return_amount, p.inv_surplus_qty, 
		    p.inv_surplus_amount, p.others_in_qty, p.others_in_amount, p.outer_way_qty, p.outer_way_amount, 
		    p.outer_diff_qty, p.outer_diff_amount, p.cost_adjustment_amount, p.sales_out_qty + IF(#{params.isPE} ='true',p.others_out_qty,0) as sales_out_qty, p.sales_out_amount + IF(#{params.isPE} ='true',p.others_out_amount,0) as sales_out_amount, 
		    p.outer_transfer_out_qty, p.outer_transfer_out_amount, p.inventory_loss_qty, p.inventory_loss_amount, 
		    IF(#{params.isPE} ='true',0,p.others_out_qty) others_out_qty, IF(#{params.isPE} ='true',0,p.others_out_amount) others_out_amount, 
		    IF(#{params.isPE} ='true',p.others_out_qty,0) others_out_qty_temp,IF(#{params.isPE} ='true',p.others_out_amount,0) others_out_amount_temp,
		    p.during_net_qty, p.during_net_amount, 
		    p.inv_surplus_qty + p.inventory_loss_qty AS during_net_inventory_qty,
		 	p.inv_surplus_amount + p.inventory_loss_amount AS during_net_inventory_amount,
		    p.closing_qty, p.closing_balance, p.unit_cost, p.region_cost, p.headquarter_cost, p.create_time, p.create_user, 
		    p.update_time, p.update_user, p.sharding_flag,
			p.opening_balance + p.purchase_in_amount + p.outer_transfer_in_amount + p.purchase_return_amount + p.inv_surplus_amount 
			+ p.others_in_amount + p.cost_adjustment_amount + p.sales_out_amount+ p.outer_transfer_out_amount + p.inventory_loss_amount + p.others_out_amount AS closing_balance_reference,
			p.closing_balance - (p.opening_balance + p.purchase_in_amount + p.outer_transfer_in_amount + p.purchase_return_amount + p.inv_surplus_amount 
			+ p.others_in_amount + p.cost_adjustment_amount + p.sales_out_amount + p.outer_transfer_out_amount + p.inventory_loss_amount + p.others_out_amount) AS weighted_difference,
			LEFT(p.category_no,2) AS category_1
		FROM company_period_balance p
		LEFT JOIN brand b ON b.brand_no = p.brand_no 
		LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no
		WHERE 1=1 
		<if test="null!=params" >
	      <if test="null!=params.queryCondition and ''!=params.queryCondition" >
	        ${params.queryCondition}
	      </if>
	      <if test="null!=params.shardingFlag and ''!=params.shardingFlag">
			   AND p.sharding_flag = #{params.shardingFlag,jdbcType=VARCHAR}
		  </if>
	      <if test="null!=params.companyNo and ''!=params.companyNo">
			   AND p.company_no = #{params.companyNo,jdbcType=CHAR}
		  </if>
		  <if test="null!=params.year and ''!=params.year">
			   AND p.year = #{params.year,jdbcType=CHAR}
		  </if>
		  <if test="null!=params.month and ''!=params.month">
			   AND p.month = #{params.month,jdbcType=CHAR}
		  </if>
		  <if test="null != params.brandNos and '' != params.brandNos">
			   AND p.brand_no in 
			    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
				</foreach>  
		   </if>
		   <if test="null != params.multiCategorys and '' != params.multiCategorys">
			   AND substring(p.category_no,1,2) in 
				<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
				    #{categoryNo} 
				 </foreach>  
		  </if>
	      <if test="null!=params.itemNo and ''!=params.itemNo">
			   AND p.item_no = #{params.itemNo,jdbcType=CHAR}
		  </if>
		  <if test="null != params.itemNos and '' != params.itemNos">
			   AND p.item_no in 
			    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
				</foreach>  
		   </if>
	    </if>
		LIMIT #{page.startRowNum} ,#{page.pageSize} 
	) T
	LEFT JOIN (
		SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
	) M ON T.company_no=M.company_no AND T.item_no=M.item_no AND T.year=M.year AND T.month=M.month
	LEFT JOIN (
		SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` = #{params.preYear} AND `month`=#{params.preMonth}
	) L ON T.company_no=L.company_no AND T.item_no=L.item_no AND L.year=#{params.preYear} AND L.month=#{params.preMonth}
	LEFT JOIN (
		SELECT * FROM company_period_sales_sum WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
	) cmss ON T.company_no=cmss.company_no AND T.year=cmss.year AND T.month=cmss.month AND T.item_no=cmss.item_no
  </select>
  
  <!-- 期间结存合计 -->
  <select id="selectTotalRow" resultMap="BaseResultMap" parameterType="map">
  	SELECT 
		'合计' company_no, (SELECT NAME FROM company WHERE A.company_no = company.company_no) AS company_name, year, month,
		IFNULL(SUM(pre_sum_owe_qty), 0) AS pre_sum_owe_qty, IFNULL(SUM(pre_sum_owe_amount), 0) AS pre_sum_owe_amount, 
		IFNULL(SUM(pre_accounting_qty), 0) AS pre_accounting_qty, IFNULL(SUM(pre_accounting_amount), 0) AS pre_accounting_amount, 
		IFNULL(SUM(curr_sum_owe_qty), 0) AS curr_sum_owe_qty, IFNULL(SUM(curr_sum_owe_amount), 0) AS curr_sum_owe_amount, 
		IFNULL(SUM(curr_accounting_qty), 0) AS curr_accounting_qty, IFNULL(SUM(curr_accounting_amount), 0) AS curr_accounting_amount,
		IFNULL(SUM(sales_sum_qty), 0) AS sales_sum_qty, IFNULL(SUM(sales_sum_amount), 0) AS sales_sum_amount, 
		
		IFNULL(SUM(opening_qty), 0) AS opening_qty, IFNULL(SUM(opening_balance), 0) AS opening_balance, 
		IFNULL(SUM(purchase_in_qty), 0) AS purchase_in_qty, IFNULL(SUM(purchase_in_amount), 0) AS purchase_in_amount, 
		IFNULL(SUM(outer_transfer_in_qty), 0) AS outer_transfer_in_qty, IFNULL(SUM(outer_transfer_in_amount), 0) AS outer_transfer_in_amount, 
		IFNULL(SUM(purchase_return_qty), 0) AS purchase_return_qty, IFNULL(SUM(purchase_return_amount), 0) AS purchase_return_amount,
		IFNULL(SUM(inv_surplus_qty), 0) AS inv_surplus_qty, IFNULL(SUM(inv_surplus_amount), 0) AS inv_surplus_amount, 
		IFNULL(SUM(others_in_qty), 0) AS others_in_qty, IFNULL(SUM(others_in_amount), 0) AS others_in_amount, 
		IFNULL(SUM(outer_way_qty), 0) AS outer_way_qty, IFNULL(SUM(outer_way_amount), 0) AS outer_way_amount, 
		IFNULL(SUM(outer_diff_qty), 0) AS outer_diff_qty, IFNULL(SUM(outer_diff_amount), 0) AS outer_diff_amount, 
		IFNULL(SUM(cost_adjustment_amount), 0) AS cost_adjustment_amount, 
		IFNULL(SUM(sales_out_qty), 0) AS sales_out_qty, IFNULL(SUM(sales_out_amount), 0) AS sales_out_amount, 
		IFNULL(SUM(outer_transfer_out_qty), 0) AS outer_transfer_out_qty, IFNULL(SUM(outer_transfer_out_amount), 0) AS outer_transfer_out_amount, 
		IFNULL(SUM(inventory_loss_qty), 0) AS inventory_loss_qty, IFNULL(SUM(inventory_loss_amount), 0) AS inventory_loss_amount, 
		IFNULL(SUM(others_out_qty), 0) AS others_out_qty, IFNULL(SUM(others_out_amount), 0) AS others_out_amount, 
		IFNULL(SUM(during_net_qty), 0) AS during_net_qty, IFNULL(SUM(during_net_amount), 0) AS during_net_amount, 
		IFNULL(SUM(inv_surplus_qty),0) + IFNULL(SUM(inventory_loss_qty),0) AS during_net_inventory_qty,
		IFNULL(SUM(inv_surplus_amount),0) + IFNULL(SUM(inventory_loss_amount),0) AS during_net_inventory_amount,
		IFNULL(SUM(closing_qty), 0) AS closing_qty, IFNULL(SUM(closing_balance), 0) AS closing_balance, 
		IFNULL(SUM(opening_balance),0) + IFNULL(SUM(purchase_in_amount),0) + IFNULL(SUM(outer_transfer_in_amount),0) + IFNULL(SUM(purchase_return_amount),0) + IFNULL(SUM(inv_surplus_amount),0) 
		 	+ IFNULL(SUM(others_in_amount),0) + IFNULL(SUM(cost_adjustment_amount),0) + IFNULL(SUM(sales_out_amount),0) 
		 	+ IFNULL(SUM(outer_transfer_out_amount),0) + IFNULL(SUM(inventory_loss_amount),0) + IFNULL(SUM(others_out_amount),0) AS closing_balance_reference,
		IFNULL(SUM(closing_balance),0) - (IFNULL(SUM(opening_balance),0) + IFNULL(SUM(purchase_in_amount),0) + IFNULL(SUM(outer_transfer_in_amount),0) + IFNULL(SUM(purchase_return_amount),0) + IFNULL(SUM(inv_surplus_amount),0) 
		 	+ IFNULL(SUM(others_in_amount),0) + IFNULL(SUM(cost_adjustment_amount),0) + IFNULL(SUM(sales_out_amount),0) 
		 	+ IFNULL(SUM(outer_transfer_out_amount),0) + IFNULL(SUM(inventory_loss_amount),0) + IFNULL(SUM(others_out_amount),0)) AS weighted_difference
		FROM 
		(
			SELECT T.*,
			IFNULL(L.sum_owe_qty, 0) AS pre_sum_owe_qty,IFNULL(L.sum_owe_cost, 0) AS pre_sum_owe_amount,
			T.opening_qty-IFNULL(L.sum_owe_qty, 0) AS pre_accounting_qty, T.opening_balance-IFNULL(L.sum_owe_cost, 0) AS pre_accounting_amount,
			IFNULL(M.sum_owe_qty, 0) AS curr_sum_owe_qty,IFNULL(M.sum_owe_cost, 0) AS curr_sum_owe_amount,
			T.closing_qty-IFNULL(M.sum_owe_qty, 0) AS curr_accounting_qty, T.closing_balance-IFNULL(M.sum_owe_cost, 0) AS curr_accounting_amount,
			IFNULL(cmss.qty,0) - T.others_out_qty_temp AS sales_sum_qty, IFNULL(cmss.unit_cost,0) - T.others_out_amount_temp AS sales_sum_amount
			FROM 
			(
				SELECT id, company_no, year, month, item_no, item_code, item_name, brand_no, category_no, 
			    opening_qty, opening_balance, purchase_in_qty, purchase_in_amount, outer_transfer_in_qty, 
			    outer_transfer_in_amount, purchase_return_qty, purchase_return_amount, inv_surplus_qty, 
			    inv_surplus_amount, others_in_qty, others_in_amount, outer_way_qty, outer_way_amount, 
			    outer_diff_qty, outer_diff_amount, cost_adjustment_amount, sales_out_qty + IF(#{params.isPE} ='true',others_out_qty,0) as sales_out_qty, sales_out_amount + IF(#{params.isPE} ='true',others_out_amount,0) as sales_out_amount,
			    outer_transfer_out_qty, outer_transfer_out_amount, inventory_loss_qty, inventory_loss_amount, 
			    IF(#{params.isPE} ='true',0,others_out_qty) others_out_qty, IF(#{params.isPE} ='true',0,others_out_amount) others_out_amount, 
			    IF(#{params.isPE} ='true',others_out_qty,0) others_out_qty_temp,IF(#{params.isPE} ='true',others_out_amount,0) others_out_amount_temp,
			    during_net_qty, during_net_amount, closing_qty, 
			    closing_balance, unit_cost, region_cost, headquarter_cost, create_time, create_user, 
			    update_time, update_user, sharding_flag,
				opening_balance + purchase_in_amount + outer_transfer_in_amount + purchase_return_amount + inv_surplus_amount 
				+ others_in_amount + cost_adjustment_amount + sales_out_amount+ outer_transfer_out_amount + inventory_loss_amount + others_out_amount AS closing_balance_reference,
				closing_balance - (opening_balance + purchase_in_amount + outer_transfer_in_amount + purchase_return_amount + inv_surplus_amount 
				+ others_in_amount + cost_adjustment_amount + sales_out_amount + outer_transfer_out_amount + inventory_loss_amount + others_out_amount) AS weighted_difference
				FROM company_period_balance WHERE 1=1 
				<include refid="condition" />
				LIMIT 0,655255 
			) T
			LEFT JOIN (
				SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
			) M ON T.company_no=M.company_no AND T.item_no=M.item_no AND T.year=M.year AND T.month=M.month
			LEFT JOIN (
				SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` = #{params.preYear} AND `month`=#{params.preMonth}
			) L ON T.company_no=L.company_no AND T.item_no=L.item_no AND L.year=#{params.preYear} AND L.month=#{params.preMonth}
			LEFT JOIN (
				SELECT * FROM company_period_sales_sum WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
			) cmss ON T.company_no=cmss.company_no AND T.year=cmss.year AND T.month=cmss.month AND T.item_no=cmss.item_no
		) A GROUP BY A.company_no, A.year, A.month
  </select>
  
  <!-- 期间小计方式统计 -->
  <select id="getCompanyPeriodSubTotalCount" resultType="java.lang.Integer" parameterType="map" >
	SELECT COUNT(1)
		FROM (  
		 	<if test="null!=params and ''!=params">
		 		<if test="'true'==params.isSubTotal">
			  	(SELECT company_no, year, month, brand_no, left(category_no,2) 
			  		FROM company_period_balance WHERE 1=1 
					<include refid="condition" /> 
			  	 ) 
	 			UNION ALL 
		 		</if>
			 </if>
				(SELECT p.company_no, p.year, p.month, p.brand_no, left(p.category_no,2)  
						FROM company_period_balance p
						LEFT JOIN brand b ON b.brand_no = p.brand_no 
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no 
						WHERE 1=1
						<if test="null!=params" >
					      <if test="null!=params.queryCondition and ''!=params.queryCondition" >
					        ${params.queryCondition}
					      </if>
					      <if test="null!=params.shardingFlag and ''!=params.shardingFlag">
							   AND p.sharding_flag = #{params.shardingFlag,jdbcType=VARCHAR}
						  </if>
					      <if test="null!=params.companyNo and ''!=params.companyNo">
							   AND p.company_no = #{params.companyNo,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.year and ''!=params.year">
							   AND p.year = #{params.year,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.month and ''!=params.month">
							   AND p.month = #{params.month,jdbcType=CHAR}
						  </if>
						  <if test="null != params.brandNos and '' != params.brandNos">
							   AND p.brand_no in 
							    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
									#{brandNo}  
								</foreach>  
						   </if>
						   <if test="null != params.multiCategorys and '' != params.multiCategorys">
							   AND substring(p.category_no,1,2) in 
								<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
								    #{categoryNo} 
								 </foreach>  
						  </if>
					      <if test="null!=params.itemNo and ''!=params.itemNo">
							   AND p.item_no = #{params.itemNo,jdbcType=CHAR}
						  </if>
						  <if test="null != params.itemNos and '' != params.itemNos">
							   AND p.item_no in 
							    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
									#{itemNo}  
								</foreach>  
						   </if>
					    </if>
						GROUP BY p.company_no,b.sys_no,LEFT(p.category_no,2)
						) 
			) 
			AS t
  </select>
  
  <sql id="subTotalCondition1">
  	<if test="null!=params" >
	  <if test="null != params.brandNos and '' != params.brandNos">
	    <foreach collection="params.brandNos" item="brandNo" separator="," open="AND bs.brand_no in (" close=")" index=""> 
			#{brandNo}  
		</foreach>  
	   </if>
	   <if test="null != params.multiCategorys and '' != params.multiCategorys">
		<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="AND substring(bs.category_no,1,2) in (" close=")" index=""> 
		    #{categoryNo} 
		 </foreach>  
	  </if>
      <if test="null!=params.itemNo and ''!=params.itemNo">
		   AND bs.item_no = #{params.itemNo,jdbcType=CHAR}
	  </if>
	  <if test="null != params.itemNos and '' != params.itemNos">
	    <foreach collection="params.itemNos" item="itemNo" separator="," open="AND bs.item_no in (" close=")" index=""> 
			#{itemNo}  
		</foreach>  
	   </if>
    </if>
  </sql>
   
  <sql id="subTotalCondition2">
  	<if test="null!=params" >
	  <if test="null != params.brandNos and '' != params.brandNos">
		   AND p.brand_no in 
		    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
				#{brandNo}  
			</foreach>  
	   </if>
	   <if test="null != params.multiCategorys and '' != params.multiCategorys">
		   AND substring(p.category_no,1,2) in 
			<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
			    #{categoryNo} 
			 </foreach>  
	  </if>
      <if test="null!=params.itemNo and ''!=params.itemNo">
		   AND p.item_no = #{params.itemNo,jdbcType=CHAR}
	  </if>
	  <if test="null != params.itemNos and '' != params.itemNos">
		   AND p.item_no in 
		    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
				#{itemNo}  
			</foreach>  
	   </if>
    </if>
  </sql>
  <!-- 期间小计方式查询 -->
  <select id="getCompanyPeriodSubTotalByPage" resultMap="BaseResultMap" parameterType="map" >
	SELECT company_no, year, month, item_no, item_code, item_name, brand_no, brand_unit_no,brand_unit_name, category_no,
					 opening_qty, opening_balance, purchase_in_qty, purchase_in_amount,
					 outer_transfer_in_qty, outer_transfer_in_amount, 
					 purchase_return_qty, purchase_return_amount, inv_surplus_qty, inv_surplus_amount, 
					 others_in_qty, others_in_amount, outer_way_qty, outer_way_amount,
					 outer_diff_qty, outer_diff_amount, cost_adjustment_amount,
					 sales_out_qty, sales_out_amount, outer_transfer_out_qty, outer_transfer_out_amount,
					 inventory_loss_qty, inventory_loss_amount, others_out_qty, others_out_amount, 
					 during_net_qty, during_net_amount, during_net_inventory_qty, during_net_inventory_amount, closing_qty, closing_balance, 
					 closing_balance_reference, weighted_difference, category_1, pre_sum_owe_qty, pre_sum_owe_amount,
					 pre_accounting_qty, pre_accounting_amount, curr_sum_owe_qty, curr_sum_owe_amount, 
					 curr_accounting_qty, curr_accounting_amount, sales_sum_qty, sales_sum_amount
		FROM (  
			<if test="null!=params and ''!=params">
		 		<if test="'true'==params.isSubTotal">
		 		SELECT C.* FROM
		 		(
		 		SELECT T.*,
					IFNULL(L.sum_owe_qty, 0) AS pre_sum_owe_qty,IFNULL(L.sum_owe_cost, 0) AS pre_sum_owe_amount,
					T.opening_qty-IFNULL(L.sum_owe_qty, 0) AS pre_accounting_qty, T.opening_balance-IFNULL(L.sum_owe_cost, 0) AS pre_accounting_amount,
					IFNULL(M.sum_owe_qty, 0) AS curr_sum_owe_qty,IFNULL(M.sum_owe_cost, 0) AS curr_sum_owe_amount,
					T.closing_qty-IFNULL(M.sum_owe_qty, 0) AS curr_accounting_qty, T.closing_balance-IFNULL(M.sum_owe_cost, 0) AS curr_accounting_amount,
					IFNULL(cmss.qty,0) - T.others_out_qty_temp AS sales_sum_qty, IFNULL(cmss.unit_cost,0) - T.others_out_amount_temp AS sales_sum_amount
					FROM 
					(
						SELECT p.id, p.company_no, p.year, p.month, p.item_no, p.item_code, p.item_name, p.brand_no,
						bu.brand_unit_no,bu.name brand_unit_name,p.category_no, 
					    p.opening_qty, p.opening_balance, p.purchase_in_qty, p.purchase_in_amount, p.outer_transfer_in_qty, 
					    p.outer_transfer_in_amount, p.purchase_return_qty, p.purchase_return_amount, p.inv_surplus_qty, 
					    p.inv_surplus_amount, p.others_in_qty, p.others_in_amount, p.outer_way_qty, p.outer_way_amount, 
					    p.outer_diff_qty, p.outer_diff_amount, p.cost_adjustment_amount, p.sales_out_qty + IF(#{params.isPE} ='true',p.others_out_qty,0) as sales_out_qty, p.sales_out_amount + IF(#{params.isPE} ='true',p.others_out_amount,0) as sales_out_amount, 
					    p.outer_transfer_out_qty, p.outer_transfer_out_amount, p.inventory_loss_qty, p.inventory_loss_amount, 
					    IF(#{params.isPE} ='true',0,p.others_out_qty) others_out_qty, IF(#{params.isPE} ='true',0,p.others_out_amount) others_out_amount, 
			    		IF(#{params.isPE} ='true',p.others_out_qty,0) others_out_qty_temp,IF(#{params.isPE} ='true',p.others_out_amount,0) others_out_amount_temp,
					    p.during_net_qty, p.during_net_amount, 
					    p.inv_surplus_qty + p.inventory_loss_qty AS during_net_inventory_qty,
					 	p.inv_surplus_amount + p.inventory_loss_amount AS during_net_inventory_amount,
					    p.closing_qty, p.closing_balance, p.unit_cost, p.region_cost, p.headquarter_cost, p.create_time, p.create_user, 
					    p.update_time, p.update_user, p.sharding_flag,
						p.opening_balance + p.purchase_in_amount + p.outer_transfer_in_amount + p.purchase_return_amount + p.inv_surplus_amount 
						+ p.others_in_amount + p.cost_adjustment_amount + p.sales_out_amount+ p.outer_transfer_out_amount + p.inventory_loss_amount + p.others_out_amount AS closing_balance_reference,
						p.closing_balance - (p.opening_balance + p.purchase_in_amount + p.outer_transfer_in_amount + p.purchase_return_amount + p.inv_surplus_amount 
						+ p.others_in_amount + p.cost_adjustment_amount + p.sales_out_amount + p.outer_transfer_out_amount + p.inventory_loss_amount + p.others_out_amount) AS weighted_difference,
						LEFT(p.category_no,2) AS category_1
						FROM company_period_balance p
						LEFT JOIN brand b ON b.brand_no = p.brand_no 
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no
						WHERE 1=1 
						<if test="null!=params" >
					      <if test="null!=params.queryCondition and ''!=params.queryCondition" >
					        ${params.queryCondition}
					      </if>
					      <if test="null!=params.shardingFlag and ''!=params.shardingFlag">
							   AND p.sharding_flag = #{params.shardingFlag,jdbcType=VARCHAR}
						  </if>
					      <if test="null!=params.companyNo and ''!=params.companyNo">
							   AND p.company_no = #{params.companyNo,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.year and ''!=params.year">
							   AND p.year = #{params.year,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.month and ''!=params.month">
							   AND p.month = #{params.month,jdbcType=CHAR}
						  </if>
						  <if test="null != params.brandNos and '' != params.brandNos">
							   AND p.brand_no in 
							    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
									#{brandNo}  
								</foreach>  
						   </if>
						   <if test="null != params.multiCategorys and '' != params.multiCategorys">
							   AND substring(p.category_no,1,2) in 
								<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
								    #{categoryNo} 
								 </foreach>  
						  </if>
					      <if test="null!=params.itemNo and ''!=params.itemNo">
							   AND p.item_no = #{params.itemNo,jdbcType=CHAR}
						  </if>
						  <if test="null != params.itemNos and '' != params.itemNos">
							   AND p.item_no in 
							    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
									#{itemNo}  
								</foreach>  
						   </if>
					    </if>
					) T
					LEFT JOIN (
						SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
					) M ON T.company_no=M.company_no AND T.item_no=M.item_no AND T.year=M.year AND T.month=M.month
					LEFT JOIN (
						SELECT * FROM back_order_sales WHERE company_no =#{params.companyNo} AND `year` = #{params.preYear} AND `month`=#{params.preMonth}
					) L ON T.company_no=L.company_no AND T.item_no=L.item_no AND L.year=#{params.preYear} AND L.month=#{params.preMonth}
					LEFT JOIN (
						SELECT * FROM company_period_sales_sum WHERE company_no =#{params.companyNo} AND `year` =#{params.year} AND `month`=#{params.month}
					) cmss ON T.company_no=cmss.company_no AND T.year=cmss.year AND T.month=cmss.month AND T.item_no=cmss.item_no
			  	) C
 			UNION ALL 
 				</if>
			</if>
			SELECT D.* FROM
				(SELECT A.*,
					IFNULL(L.sum_owe_qty, 0) AS pre_sum_owe_qty,IFNULL(L.sum_owe_cost, 0) AS pre_sum_owe_amount,
					A.opening_qty-IFNULL(L.sum_owe_qty, 0) AS pre_accounting_qty, A.opening_balance-IFNULL(L.sum_owe_cost, 0) AS pre_accounting_amount,
					IFNULL(M.sum_owe_qty, 0) AS curr_sum_owe_qty,IFNULL(M.sum_owe_cost, 0) AS curr_sum_owe_amount,
					A.closing_qty-IFNULL(M.sum_owe_qty, 0) AS curr_accounting_qty, A.closing_balance-IFNULL(M.sum_owe_cost, 0) AS curr_accounting_amount,
				 	IFNULL(W.total_qty,0) - A.others_out_qty_temp AS sales_sum_qty, IFNULL(W.total_cost,0) - A.others_out_amount_temp AS sales_sum_amount
				 FROM 
					(
						SELECT p.id, p.company_no, p.year, p.month, p.item_no, p.item_code, p.item_name, p.brand_no, 
						 bu.brand_unit_no,bu.name brand_unit_name,
						 CONCAT(LEFT(p.category_no,2),'zzzzzzzzzzzz') AS category_no, 
						 SUM(p.opening_qty) AS opening_qty, SUM(p.opening_balance) AS opening_balance, 
						 SUM(p.purchase_in_qty) AS purchase_in_qty, SUM(p.purchase_in_amount) AS purchase_in_amount,
						 SUM(p.outer_transfer_in_qty) AS outer_transfer_in_qty, SUM(p.outer_transfer_in_amount) AS outer_transfer_in_amount,
						 SUM(p.purchase_return_qty) AS purchase_return_qty, SUM(p.purchase_return_amount) AS purchase_return_amount, 
						 SUM(p.inv_surplus_qty) AS inv_surplus_qty, SUM(p.inv_surplus_amount) AS inv_surplus_amount, 
						 SUM(p.others_in_qty) AS others_in_qty, SUM(p.others_in_amount) AS others_in_amount,
						 SUM(p.outer_way_qty) AS outer_way_qty,SUM(p.outer_way_amount) AS outer_way_amount,
						 SUM(p.outer_diff_qty) AS outer_diff_qty,SUM(p.outer_diff_amount) AS outer_diff_amount, SUM(p.cost_adjustment_amount) AS cost_adjustment_amount,
						 SUM(p.sales_out_qty)+SUM(IF(#{params.isPE} ='true',p.others_out_qty,0)) AS sales_out_qty, SUM(p.sales_out_amount) + SUM(IF(#{params.isPE} ='true',p.others_out_amount,0)) AS sales_out_amount, 
						 SUM(p.outer_transfer_out_qty) AS outer_transfer_out_qty, SUM(p.outer_transfer_out_amount) AS outer_transfer_out_amount,
						 SUM(p.inventory_loss_qty) AS inventory_loss_qty, SUM(p.inventory_loss_amount) AS inventory_loss_amount,
						 SUM(IF(#{params.isPE} ='true',0,p.others_out_qty)) others_out_qty, SUM(IF(#{params.isPE} ='true',0,p.others_out_amount)) others_out_amount, 
			    		 SUM(IF(#{params.isPE} ='true',p.others_out_qty,0)) others_out_qty_temp,SUM(IF(#{params.isPE} ='true',p.others_out_amount,0)) others_out_amount_temp,
						 SUM(p.during_net_qty) AS during_net_qty, SUM(p.during_net_amount) AS during_net_amount, 
						 SUM(p.inv_surplus_qty) + SUM(p.inventory_loss_qty) AS during_net_inventory_qty,
						 SUM(p.inv_surplus_amount) + SUM(p.inventory_loss_amount) AS during_net_inventory_amount,
						 SUM(p.closing_qty) AS closing_qty, SUM(p.closing_balance) AS closing_balance, 
						 SUM(IFNULL(p.unit_cost, 0)) AS unit_cost, SUM(IFNULL(p.region_cost, 0)) AS region_cost, SUM(IFNULL(p.headquarter_cost, 0)) AS headquarter_cost,
						 p.create_time, p.create_user, p.update_time, p.update_user, p.sharding_flag,
						 SUM(p.opening_balance) + SUM(p.purchase_in_amount) + SUM(p.outer_transfer_in_amount) + SUM(p.purchase_return_amount) + SUM(p.inv_surplus_amount) 
						 	+ SUM(p.others_in_amount) + SUM(p.cost_adjustment_amount) + SUM(p.sales_out_amount) 
						 	+ SUM(p.outer_transfer_out_amount) + SUM(p.inventory_loss_amount) + SUM(p.others_out_amount) AS closing_balance_reference,
						 SUM(p.closing_balance) - (SUM(p.opening_balance) + SUM(p.purchase_in_amount) + SUM(p.outer_transfer_in_amount) + SUM(p.purchase_return_amount) + SUM(p.inv_surplus_amount) 
						 	+ SUM(p.others_in_amount) + SUM(p.cost_adjustment_amount) + SUM(p.sales_out_amount) 
						 	+ SUM(p.outer_transfer_out_amount) + SUM(p.inventory_loss_amount) + SUM(p.others_out_amount)) AS weighted_difference, 
						 	LEFT(p.category_no,2) AS category_1
						FROM company_period_balance p 
						LEFT JOIN brand b ON b.brand_no = p.brand_no 
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no 
						WHERE 1=1 
						<if test="null!=params" >
					      <if test="null!=params.queryCondition and ''!=params.queryCondition" >
					        ${params.queryCondition}
					      </if>
					      <if test="null!=params.shardingFlag and ''!=params.shardingFlag">
							   AND p.sharding_flag = #{params.shardingFlag,jdbcType=VARCHAR}
						  </if>
					      <if test="null!=params.companyNo and ''!=params.companyNo">
							   AND p.company_no = #{params.companyNo,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.year and ''!=params.year">
							   AND p.year = #{params.year,jdbcType=CHAR}
						  </if>
						  <if test="null!=params.month and ''!=params.month">
							   AND p.month = #{params.month,jdbcType=CHAR}
						  </if>
						  <if test="null != params.brandNos and '' != params.brandNos">
							   AND p.brand_no in 
							    <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
									#{brandNo}  
								</foreach>  
						   </if>
						   <if test="null != params.multiCategorys and '' != params.multiCategorys">
							   AND substring(p.category_no,1,2) in 
								<foreach collection="params.multiCategorys" item="categoryNo" separator="," open="(" close=")" index=""> 
								    #{categoryNo} 
								 </foreach>  
						  </if>
					      <if test="null!=params.itemNo and ''!=params.itemNo">
							   AND p.item_no = #{params.itemNo,jdbcType=CHAR}
						  </if>
						  <if test="null != params.itemNos and '' != params.itemNos">
							   AND p.item_no in 
							    <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
									#{itemNo}  
								</foreach>  
						   </if>
					    </if>
						GROUP BY p.company_no,bu.brand_unit_no,LEFT(p.category_no,2)
					) AS A
			  		LEFT JOIN 
			  		(
			  			SELECT
							bs.company_no, bs.YEAR, bs.MONTH, bs.brand_no,bu.brand_unit_no,
							LEFT(bs.category_no, 2) category_no1,
							SUM(IFNULL(bs.sum_owe_qty, 0)) sum_owe_qty,
							SUM(IFNULL(bs.sum_owe_cost, 0)) sum_owe_cost
						FROM
							back_order_sales bs
						LEFT JOIN brand b ON b.brand_no = bs.brand_no
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no
		  				WHERE bs.company_no=#{params.companyNo} and bs.year=#{params.year} and bs.month=#{params.month}
		  				<include refid="subTotalCondition1"></include>
						GROUP BY bs.company_no,bu.brand_unit_no,LEFT(bs.category_no,2)
			  		) M ON A.company_no=M.company_no and A.brand_unit_no=M.brand_unit_no and A.category_1=M.category_no1
					LEFT JOIN
					(
						SELECT
							bs.company_no, bs.YEAR, bs.MONTH, bs.brand_no,bu.brand_unit_no,
							LEFT(bs.category_no, 2) category_no1,
							SUM(IFNULL(bs.sum_owe_qty, 0)) sum_owe_qty,
							SUM(IFNULL(bs.sum_owe_cost, 0)) sum_owe_cost
						FROM
							back_order_sales bs
						LEFT JOIN brand b ON b.brand_no = bs.brand_no
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no
						WHERE bs.company_no = #{params.companyNo} and bs.year=#{params.preYear} and bs.month=#{params.preMonth}
						<include refid="subTotalCondition1"></include>
						GROUP BY bs.company_no,bu.brand_unit_no,LEFT(bs.category_no,2)
			  		) L ON A.company_no=L.company_no and A.brand_unit_no=L.brand_unit_no and A.category_1=L.category_no1
					LEFT JOIN
					(
						SELECT
							p.company_no, p. YEAR, p. MONTH, p.brand_no, bu.brand_unit_no,
							LEFT (p.category_no, 2) category_no1,
							SUM(IFNULL(p.qty, 0)) total_qty,
							SUM(IFNULL(p.amount, 0)) total_amount,
							SUM(IFNULL(p.unit_cost, 0)) total_cost
						FROM
							company_period_sales_sum p
						LEFT JOIN brand b ON b.brand_no = p.brand_no
						LEFT JOIN brand_unit AS bu ON bu.brand_unit_no = b.sys_no
						WHERE p.company_no=#{params.companyNo} and p.year=#{params.year} and p.month=#{params.month}
						<include refid="subTotalCondition2"></include>
						GROUP BY p.company_no, bu.brand_unit_no, LEFT(p.category_no, 2)
			  		) W ON A.company_no=W.company_no and A.brand_unit_no=W.brand_unit_no and A.category_1=W.category_no1
			) AS D
		) AS E ORDER BY company_no,brand_unit_no,left(category_no,2),category_no LIMIT #{page.startRowNum} ,#{page.pageSize} 
  </select> 
  
  <delete id="deleteMonthlyBalance" parameterType="map" >
    DELETE FROM company_period_balance
    	WHERE company_no = #{params.companyNo} AND year = #{params.year} AND month= #{params.month}
    	AND sharding_flag = #{params.shardingFlag}
    	<if test="null != params.itemNos and '' != params.itemNos">
			AND item_no in 
			<foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
				#{itemNo}  
			</foreach>  
		</if>
		<if test="null != params.brandNos and '' != params.brandNos">
			AND brand_no in 
			<foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
				#{brandNo}  
			</foreach>  
		</if>
  </delete>
  
  <delete id="deleteCompanyMonthPeriodBalance" parameterType="map" >
    DELETE FROM company_period_balance
    	WHERE sharding_flag=#{params.shardingFlag} AND company_no = #{params.companyNo} AND year = #{params.year} AND month= #{params.month}
    	 AND sharding_flag = #{params.shardingFlag}
    	 <if test="null != params.brandNos and '' != params.brandNos">
			AND brand_no in 
			<foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
				#{brandNo}  
			</foreach>  
		</if>
    	<if test="null != params.itemNos and '' != params.itemNos">
			AND item_no in 
			<foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
				#{itemNo}  
			</foreach>  
		</if>
  </delete>
  
  <insert id="summaryInventoryBook" parameterType="map" >
    INSERT INTO company_period_balance
    (id, sharding_flag, company_no, year, month, item_no, item_code, item_name, brand_no, category_no, 
     opening_qty, opening_balance, purchase_in_qty,<!--  purchase_in_amount, -->outer_transfer_in_qty,<!-- outer_transfer_in_amount,--> 
     purchase_return_qty, <!-- purchase_return_amount,-->inv_surplus_qty, others_in_qty,
     outer_way_qty, outer_way_amount, outer_diff_qty, outer_diff_amount, <!-- cost_adjustment_amount,  -->
     sales_out_qty, outer_transfer_out_qty, inventory_loss_qty, during_net_qty, closing_qty
    )
    SELECT replace(uuid(), '-', ''), T.sharding_flag, T.company_no, T.YEAR, T.MONTH, 
    		T.item_no, T.item_code, T.item_name, T.brand_no, T.category_no, 
			IF(ISNULL(p.closing_qty),0,p.closing_qty) AS opening_qty,
			IF(ISNULL(p.closing_balance),0,p.closing_balance) AS opening_balance,
			T.purchase_in_qty, <!--T.purchase_in_amount,-->
			T.outer_transfer_in_qty,<!-- T.outer_transfer_in_amount,-->
			T.purchase_return_qty, <!--T.purchase_return_amount,-->
			T.inv_surplus_qty, T.others_in_qty,
			T.outer_way_qty + IF(ISNULL(p.outer_way_qty),0,p.outer_way_qty) AS outer_way_qty,
			T.outer_way_amount + IF(ISNULL(p.outer_way_amount),0,p.outer_way_amount) AS outer_way_amount,
			T.outer_diff_qty + IF(ISNULL(p.outer_diff_qty),0,p.outer_diff_qty) AS outer_diff_qty,
			T.outer_diff_amount+ IF(ISNULL(p.outer_diff_amount),0,p.outer_diff_amount) AS outer_diff_amount,
			<!--T.cost_adjustment_amount,-->
			T.sales_out_qty, T.outer_transfer_out_qty, T.inventory_loss_qty, T.during_net_qty,
			IF(ISNULL(p.closing_qty),0,p.closing_qty) + T.during_net_qty AS closing_qty
	 FROM
   	 (SELECT ib.sharding_flag AS sharding_flag,
       ou.company_no company_no,
       YEAR(ib.`bill_date`) AS YEAR,
       MONTH(ib.`bill_date`) AS MONTH,       
       ib.item_no AS item_no,
       ib.item_code AS item_code,
       ib.item_name AS item_name,
       ib.brand_no AS brand_no,
       ib.category_no AS category_no,
       SUM(IF(bic.fas_col_no ='purchase_in_qty', ib.balance_offset, 0)) AS purchase_in_qty,
       <!--SUM(IF(bic.fas_col_no ='purchase_in_qty', ib.balance_offset*ib.cost, 0)) AS purchase_in_amount,-->
       SUM(IF(bic.fas_col_no ='purchase_return_qty', ib.original_bad_offset, 0))
       + SUM(IF(bic.fas_col_no ='outer_transfer_in_qty' AND ou1.company_no IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset, 0)) 
       + SUM(IF(bic.fas_col_no ='outer_transfer_out_qty' AND ou2.company_no IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset, 0)) AS  purchase_return_qty,
       <!--SUM(IF(bic.fas_col_no ='purchase_return_qty', ib.original_bad_offset*ib.cost, 0)) 
       + SUM(IF(bic.fas_col_no ='outer_transfer_in_qty' AND ou1.company_no IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset*ib.cost, 0))
       + SUM(IF(bic.fas_col_no ='outer_transfer_out_qty' AND ou2.company_no IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset*ib.cost, 0)) AS purchase_return_amount,
       SUM(IF(ib.bill_type =2000, ib.cost, 0)) AS cost_adjustment_amount,  -->
       SUM(IF(bic.fas_col_no ='outer_transfer_in_qty' AND  ou1.company_no NOT IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset, 0)) AS outer_transfer_in_qty, 
       <!--SUM(IF(bic.fas_col_no ='outer_transfer_in_qty' AND  ou1.company_no NOT IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1), ib.balance_offset*ib.cost, 0)) AS outer_transfer_in_amount,-->
       (SUM(IF(ib.bill_type =1350 AND ib.balance_offset &gt; 0, ib.balance_offset, 0))
       + SUM(IF(ib.bill_type =1350 AND ib.guest_bad_offset &gt; 0, ib.guest_bad_offset, 0))
       + SUM(IF(ib.bill_type =1350 AND ib.original_bad_offset &gt; 0, ib.original_bad_offset, 0)))
       AS inv_surplus_qty, 
       SUM(IF(bic.fas_col_no ='outer_way_qty', ib.transit_in_account_offset, 0))
       + SUM(IF(bic.fas_col_no ='outer_way_qty', ib.factory_in_offset, 0)) AS outer_way_qty,
       SUM(IF(bic.fas_col_no ='outer_way_qty', ib.transit_in_account_offset*ib.cost, 0))
       + SUM(IF(bic.fas_col_no ='outer_way_qty', ib.factory_in_offset*ib.cost, 0)) AS outer_way_amount,
       SUM(IF(bic.fas_col_no ='outer_diff_qty', ib.in_diff_account_offset, 0)) 
       + SUM(IF(bic.fas_col_no ='outer_diff_qty', ib.factory_in_diff_offset, 0)) AS outer_diff_qty,
       SUM(IF(bic.fas_col_no ='outer_diff_qty', ib.in_diff_account_offset*ib.cost, 0)) 
       + SUM(IF(bic.fas_col_no ='outer_diff_qty', ib.factory_in_diff_offset*ib.cost, 0))AS outer_diff_amount,
       SUM(CASE WHEN bic.fas_col_no ='sales_out_qty' THEN (ib.balance_offset+ib.guest_bad_offset)
          ELSE 0 END) AS  sales_out_qty,
       SUM(IF(bic.fas_col_no ='outer_transfer_out_qty' AND ou2.company_no NOT IN (select fa.company_no from financial_account fa where fa.group_lead_role=1 and fa.status=1) , ib.balance_offset, 0)) AS outer_transfer_out_qty,
       SUM(IF(ib.bill_type =1350 AND ib.balance_offset &lt; 0, ib.balance_offset, 0))
       + SUM(IF(ib.bill_type =1350 AND ib.guest_bad_offset &lt; 0, ib.guest_bad_offset, 0))
       + SUM(IF(ib.bill_type =1350 AND ib.original_bad_offset &lt; 0, ib.original_bad_offset, 0))
       AS inventory_loss_qty,
       SUM(CASE WHEN bic.fas_col_no ='others_in_qty' THEN (ib.balance_offset+ib.guest_bad_offset+ib.original_bad_offset)
          ELSE 0 END) AS  others_in_qty,
       SUM(CASE WHEN bic.fas_col_no NOT IN ('outer_way_qty','outer_diff_qty','inner_way_qty','inner_diff_qty','inner_transfer_in_qty','inner_transfer_out_qty') 
         THEN (ib.balance_offset+ib.guest_bad_offset+ib.original_bad_offset)
          ELSE 0 END) + SUM(CASE WHEN bic.fas_col_no ='inner_way_qty' THEN (ib.transit_in_offset+ib.bad_transit_offset)
          ELSE 0 END) + SUM(CASE WHEN bic.fas_col_no ='inner_diff_qty' THEN (ib.in_diff_offset+ib.bad_diff_offset)
          ELSE 0 END) + SUM(CASE WHEN bic.fas_col_no ='inner_transfer_in_qty' THEN (ib.balance_offset+ib.original_bad_offset+ib.guest_bad_offset)
          ELSE 0 END) + SUM(CASE WHEN bic.fas_col_no ='inner_transfer_out_qty' THEN (ib.balance_offset+ib.original_bad_offset+ib.guest_bad_offset)
          ELSE 0 END) AS  during_net_qty
	 FROM inventory_financial_book ib force index(idx_ou_cost)
	 LEFT JOIN 
	 (
	 	SELECT ouc1.order_unit_no,ouc1.company_no FROM order_unit_company ouc1
		INNER JOIN
		(SELECT order_unit_no,MAX(effective_date) effective_date FROM order_unit_company
		WHERE effective_date &lt;= DATE_FORMAT(#{params.startDate},'%Y-%m-%d') GROUP BY order_unit_no
		) ouc2 ON ouc1.order_unit_no=ouc2.order_unit_no AND ouc1.effective_date=ouc2.effective_date
	 ) ou 
	 ON ib.order_unit_no = ou.order_unit_no 
	 LEFT JOIN 
	 (
	 	SELECT ouc1.order_unit_no,ouc1.company_no FROM order_unit_company ouc1
		INNER JOIN
		(SELECT order_unit_no,MAX(effective_date) effective_date FROM order_unit_company
		WHERE effective_date &lt;= DATE_FORMAT(#{params.startDate},'%Y-%m-%d') GROUP BY order_unit_no
		) ouc2 ON ouc1.order_unit_no=ouc2.order_unit_no AND ouc1.effective_date=ouc2.effective_date
	 ) ou1
	 ON ib.order_unit_no_from = ou1.order_unit_no
	 LEFT JOIN 
	 (
	 	SELECT ouc1.order_unit_no,ouc1.company_no FROM order_unit_company ouc1
		INNER JOIN
		(SELECT order_unit_no,MAX(effective_date) effective_date FROM order_unit_company
		WHERE effective_date &lt;= DATE_FORMAT(#{params.startDate},'%Y-%m-%d') GROUP BY order_unit_no
		) ouc2 ON ouc1.order_unit_no=ouc2.order_unit_no AND ouc1.effective_date=ouc2.effective_date
	 ) ou2
	 ON ib.order_unit_no_to = ou2.order_unit_no
	 LEFT JOIN bill_inventory_control bic on ib.bill_type=bic.bill_type and ib.in_out_flag=bic.in_out_flag
	WHERE ib.bill_date &gt;= DATE_FORMAT(#{params.startDate},'%Y-%m-%d')
       AND ib.bill_date &lt;= DATE_FORMAT(#{params.endDate},'%Y-%m-%d')
       AND ou.company_no = #{params.companyNo}
       AND ib.sharding_flag = #{params.shardingFlag}
       <if test="null != params.brandNos and '' != params.brandNos">
       		AND ib.brand_no in 
	       <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
	        	#{brandNo}  
	       </foreach>  
       </if>
 	   <if test="null != params.itemNos and '' != params.itemNos">
       		AND ib.ITEM_NO in 
	       <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
	        	#{itemNo}  
	       </foreach>  
       </if>
       GROUP BY ou.company_no,ib.item_no 
      ) T
       LEFT JOIN 
       (SELECT * FROM company_period_balance WHERE company_no = #{params.companyNo} AND year=#{params.lastYear} 
       	AND month=#{params.lastMonth} AND sharding_flag = #{params.shardingFlag}
       	<if test="null != params.brandNos and '' != params.brandNos">
       		AND brand_no in 
	       <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
	        	#{brandNo}  
	       </foreach>  
       </if>
 	   <if test="null != params.itemNos and '' != params.itemNos">
       		AND item_no in 
	       <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
	        	#{itemNo}  
	       </foreach>  
       </if>
       ) AS p
       ON T.company_no=p.company_no AND T.item_no=p.item_no AND T.sharding_flag=p.sharding_flag
  </insert>
  
  <insert id="transferLastPeriodBalanceToCurrent" parameterType="map" >
    INSERT INTO company_period_balance
    (id, company_no, year, month, item_no, item_code, item_name, brand_no, category_no, 
    opening_qty, opening_balance, outer_way_qty, outer_way_amount, outer_diff_qty, outer_diff_amount,
    closing_qty, closing_balance, create_time, create_user, update_time, update_user, sharding_flag
    )
	SELECT replace(uuid(), '-', ''),
	  A.company_no, 
      YEAR(date_add(CAST(CONCAT(A.year,'/',A.month,'/','01') AS DATE),interval 1 month)),
      MONTH(date_add(CAST(CONCAT(A.year,'/',A.month,'/','01') AS DATE),interval 1 month)), 
	  A.item_no, A.item_code, A.item_name, A.brand_no, A.category_no, 
      A.closing_qty, A.closing_balance, A.outer_way_qty, A.outer_way_amount, A.outer_diff_qty, A.outer_diff_amount,
      A.closing_qty, A.closing_balance, A.create_time, A.create_user, A.update_time, A.update_user, A.sharding_flag
     FROM company_period_balance A
     LEFT JOIN 
     (SELECT company_no, year, month, item_no FROM company_period_balance 
     	WHERE company_no=#{params.companyNo} AND year=#{params.currentYear} 
     	AND month=#{params.currentMonth} AND sharding_flag=#{params.shardingFlag}
     	<if test="null != params.brandNos and '' != params.brandNos">
			   AND brand_no in 
			   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
			   </foreach>  
		 </if>
     	<if test="null != params.itemNos and '' != params.itemNos">
			   AND item_no in 
			   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			   </foreach>  
		 </if>
     ) B ON A.company_no=B.company_no AND A.item_no=B.item_no     
     WHERE B.company_no IS NULL AND A.company_no=#{params.companyNo} AND A.year=#{params.lastYear} AND A.month=#{params.lastMonth}
      AND A.sharding_flag=#{params.shardingFlag}  
      <if test="null != params.brandNos and '' != params.brandNos">
			   AND A.brand_no in 
			   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
			   </foreach>  
		 </if>
     	<if test="null != params.itemNos and '' != params.itemNos">
			   AND A.item_no in 
			   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			   </foreach>  
		 </if>
		   LIMIT 0,655535
  </insert>
  
  <!-- 上月已经存在结存而本月未发生结存的记录-->
  <select id="queryPeriodBalanceJoinItemCostCount" resultType="java.lang.Integer" parameterType="map" >
	SELECT COUNT(1) FROM
		(SELECT pb.id, pb.company_no, pb.year, pb.month, pb.item_no,ic.unit_cost FROM company_period_balance pb 
		LEFT JOIN 
		(SELECT company_no, year, month, item_no,unit_cost FROM item_cost 
			WHERE company_no = #{params.companyNo} AND year = #{params.year} AND month = #{params.month}
			 AND sharding_flag = #{params.shardingFlag}
			<if test="null != params.brandNos and '' != params.brandNos">
			   AND brand_no in 
			   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
			   </foreach>  
		   </if>
		   <if test="null != params.itemNos and '' != params.itemNos">
			   AND item_no in 
			   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			   </foreach>  
		   </if>
		) ic ON pb.company_no = ic.company_no and pb.year = ic.year and pb.month = ic.month and pb.item_no = ic.item_no 
		WHERE pb.company_no = #{params.companyNo} AND pb.year = #{params.year} AND pb.month = #{params.month}
			 AND pb.sharding_flag = #{params.shardingFlag}
			<if test="null != params.brandNos and '' != params.brandNos">
			   AND pb.brand_no in 
			   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
			   </foreach>  
		   </if>
			<if test="null != params.itemNos and '' != params.itemNos">
			   AND pb.item_no in 
			   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			   </foreach>  
		   </if>
		 ) a
  </select>
  
  <!-- 回写成本到公司结存的出库类汇总金额-->
  <update id="batchUpdateBalanceItemCostByPage" parameterType="map" >
  	UPDATE company_period_balance p, (SELECT pb.id, pb.company_no, pb.year,pb.month, pb.item_no, pb.brand_no, ic.unit_cost
		FROM company_period_balance pb 
		LEFT JOIN 
		(SELECT company_no, year, month, item_no,unit_cost FROM item_cost 
			WHERE company_no = #{params.companyNo} AND year = #{params.year} AND month = #{params.month}
			AND sharding_flag = #{params.shardingFlag}
			<if test="null != params.brandNos and '' != params.brandNos">
					   AND brand_no in 
					   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
							#{brandNo}  
					   </foreach>  
			</if>
			<if test="null != params.itemNos and '' != params.itemNos">
					   AND item_no in 
					   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
							#{itemNo}  
					   </foreach>  
			</if>
		) ic ON pb.company_no = ic.company_no and pb.year = ic.year and pb.month = ic.month and pb.item_no = ic.item_no 
		WHERE pb.company_no = #{params.companyNo} AND pb.year = #{params.year} AND pb.month = #{params.month}
		AND  pb.sharding_flag = #{params.shardingFlag}
				<if test="null != params.brandNos and '' != params.brandNos">
					   AND pb.brand_no in 
					   <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
							#{brandNo}  
					   </foreach>  
				   </if>
					<if test="null != params.itemNos and '' != params.itemNos">
					   AND pb.item_no in 
					   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
							#{itemNo}  
					   </foreach>  
				   </if>
				LIMIT #{page.startRowNum} ,#{page.pageSize} ) T
				SET
				p.inv_surplus_amount=p.inv_surplus_qty * IFNULL(T.unit_cost, 0),
				p.others_in_amount=p.others_in_qty * IFNULL(T.unit_cost, 0),
				p.outer_way_amount=p.outer_way_qty * IFNULL(T.unit_cost, 0),
				p.outer_diff_amount=p.outer_diff_qty * IFNULL(T.unit_cost, 0),
				p.sales_out_amount=p.sales_out_qty * IFNULL(T.unit_cost, 0),
				p.outer_transfer_out_amount=p.outer_transfer_out_qty * IFNULL(T.unit_cost, 0),
				p.inventory_loss_amount=p.inventory_loss_qty * IFNULL(T.unit_cost, 0),
				p.others_out_amount=p.others_out_qty * IFNULL(T.unit_cost, 0),
				p.during_net_amount=p.purchase_in_amount+p.purchase_return_amount+p.outer_transfer_in_amount+(p.inv_surplus_qty+p.others_in_qty+p.sales_out_qty+p.outer_transfer_out_qty+p.inventory_loss_qty+p.others_out_qty)* IFNULL(T.unit_cost, 0),
				p.closing_balance=p.closing_qty*IFNULL(T.unit_cost, 0),
				p.unit_cost=IFNULL(T.unit_cost, 0)
				WHERE p.id=T.id
  </update>
  
  <update  id="batchUpdateWriteBackAmount" parameterType="map">
		update company_period_balance pb,(
			SELECT A.buyer_no,A.item_no,A.cost,
				(
					SELECT
						IFNULL(SUM(dtl.amount), 0)
					FROM
						bill_purchase_adjust main
					LEFT JOIN bill_purchase_adjust_dtl dtl ON main.bill_no = dtl.bill_no
					WHERE 1=1
					AND main.`status` = 1
					AND main.buyer_no =  A.buyer_no
					AND YEAR(main.purchase_date) =#{params.currentYear}
					AND MONTH(main.purchase_date) =#{params.currentMonth}
					AND dtl.item_no = A.item_no
				) amount,
				SUM(A.purchase_in_qty*A.cost) purchase_in_amount,
				SUM(A.outer_transfer_in_qty*A.cost) outer_transfer_in_amount,
				SUM(A.purchase_return_qty*A.cost) purchase_return_amount
			FROM (
				SELECT
					b.buyer_no, b.buyer_name, b.saler_no, b.saler_name, b.brand_no,
					b.item_no, b.item_code, b.item_name, b.cost, b.receive_date, b.sharding_flag,
					IF(b.bill_type = 1304,b.receive_qty,0) + IF(b.bill_type = 1372 AND b.fas_bill_code in ('FG13720401','FG13720501'),b.receive_qty,0) purchase_in_qty,
					IF(b.bill_type = 1372 AND b.fas_bill_code NOT IN ('FG13720401','FG13720501','FG13720404','FG13720504','FG13724001','FG13724101'),b.receive_qty,0) outer_transfer_in_qty,
					IF(#{params.isPE} ='true',0,IF(b.bill_type = 1333,b.send_qty,0)) 
					+ IF(#{params.isPE} ='true',0,IF(b.bill_type = 1372 AND b.fas_bill_code in ('FG13720404','FG13720504','FG13724001','FG13724101'),b.send_qty,0)) purchase_return_qty
				FROM
					bill_buy_balance b
				WHERE 1=1
				AND YEAR(IFNULL(b.receive_date,b.send_date)) = #{params.currentYear}
				AND MONTH(IFNULL(b.receive_date,b.send_date)) = #{params.currentMonth}
				AND b.buyer_no = #{params.companyNo}
				<if test="null != params.brandNos and '' != params.brandNos">
					  	AND b.brand_no in 
					 <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					 	#{brandNo}
					 </foreach>  
				</if>
				<if test="null != params.itemNos and '' != params.itemNos">
				   AND b.item_no in 
				   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
						#{itemNo}  
				   </foreach>  
			   	</if>
			) A 
			GROUP BY A.buyer_no,A.item_no
		) T1 set
		pb.purchase_in_amount= T1.purchase_in_amount + T1.amount,
		pb.purchase_return_amount= T1.purchase_return_amount,
		pb.outer_transfer_in_amount= T1.outer_transfer_in_amount
		WHERE   pb.company_no=T1.buyer_no 
				AND pb.`year`=#{params.currentYear}
				AND pb.`month`=#{params.currentMonth}
				AND pb.sharding_flag = #{params.shardingFlag}
				AND pb.item_no=T1.item_no
  </update>
  
  <update id="batchHandleCostDjustmentAmount"  parameterType="map" >
  	UPDATE company_period_balance p,
	 (
		SELECT 
			A.sharding_flag,A.company_no,A.`year`,A.`month`,
			A.item_no,A.adjust_cost
		FROM (
			SELECT 
				main.sharding_flag,main.company_no,main.`year`,main.`month`,dtl.item_no,
				dtl.adjust_cost,dtl.update_time
			FROM bill_inv_cost_adjust main 
			LEFT JOIN bill_inv_cost_adjust_dtl dtl ON main.bill_no = dtl.bill_no
			WHERE 1=1 AND main.`status` = 1 AND main.sharding_flag = #{params.shardingFlag} 
			AND main.company_no = #{params.companyNo}
			AND main.`year` = #{params.year} AND main.`month`=#{params.month}
			<if test="null != params.brandNos and '' != params.brandNos">
				<foreach collection="params.brandNos" item="brandNo" separator="," open="AND dtl.brand_no in (" close=")" index=""> 
					#{brandNo}  
				</foreach>  
			</if>
	    	<if test="null != params.itemNos and '' != params.itemNos">
				<foreach collection="params.itemNos" item="itemNo" separator="," open="AND dtl.item_no in  (" close=")" index=""> 
					#{itemNo}  
				</foreach>  
			</if>
		) A
		WHERE EXISTS (
			SELECT COUNT(*) FROM (
				SELECT 
				main.sharding_flag,main.company_no,main.`year`,main.`month`,dtl.item_no,
				dtl.adjust_cost,dtl.update_time
			FROM bill_inv_cost_adjust main 
			LEFT JOIN bill_inv_cost_adjust_dtl dtl ON main.bill_no = dtl.bill_no
			WHERE 1=1 AND main.`status` = 1 AND main.sharding_flag = #{params.shardingFlag} AND main.company_no = #{params.companyNo}
			AND main.`year` = #{params.year} AND main.`month`=#{params.month}
			<if test="null != params.brandNos and '' != params.brandNos">
				<foreach collection="params.brandNos" item="brandNo" separator="," open="AND dtl.brand_no in (" close=")" index=""> 
					#{brandNo}  
				</foreach>  
			</if>
	    	<if test="null != params.itemNos and '' != params.itemNos">
				<foreach collection="params.itemNos" item="itemNo" separator="," open="AND dtl.item_no in  (" close=")" index=""> 
					#{itemNo}  
				</foreach>  
			</if>
			) B WHERE B.sharding_flag = A.sharding_flag AND B.company_no = A.company_no AND B.year = A.`year`
			AND B.month=A.`month` AND B.item_no = A.item_no AND B.update_time &gt;= A.update_time HAVING COUNT(*) = 1
		)
		ORDER BY A.company_no,A.`year`,A.`month`,A.item_no,A.update_time
	) T
	SET p.cost_adjustment_amount = T.adjust_cost * (p.opening_qty + p.purchase_in_qty + p.purchase_return_qty + p.outer_transfer_in_qty)
		- (p.opening_balance + p.purchase_in_amount + p.purchase_return_amount + p.outer_transfer_in_amount)
	WHERE 1=1 AND p.sharding_flag = T.sharding_flag AND p.company_no=T.company_no AND p.`year`=T.`year` AND p.`month`=T.`month` AND p.item_no=T.item_no
  </update>
  
  <!-- 从店铺结存汇总出公司结存 -->
  <insert  id="ShopSummaryToCompany" parameterType="map">
  	insert into company_period_balance(
		id, company_no, year, month, item_no, item_code, item_name, brand_no, category_no, 
		opening_qty, opening_balance, 
		purchase_in_qty, outer_transfer_in_qty, purchase_return_qty,
		inv_surplus_qty,others_in_qty, outer_way_qty, outer_diff_qty,
		sales_out_qty, outer_transfer_out_qty, inventory_loss_qty,
	  others_out_qty, during_net_qty, closing_qty, sharding_flag
	)select 
		replace(uuid(), '-', ''), pb.company_no,pb.year,pb.month,
		pb.item_no, pb.item_code,pb.item_name, pb.brand_no,pb.category_no,
		SUM(pb.opening_qty) as opening_qty,SUM(pb.opening_qty*IFNULL(i.unit_cost,0)) as opening_balance, 
		SUM(pb.purchase_in_qty) as purchase_in_qty,SUM(pb.outer_transfer_in_qty) as outer_transfer_in_qty,
		SUM(pb.purchase_return_qty) as purchase_return_qty,SUM(pb.inv_surplus_qty) as inv_surplus_qty,
		SUM(pb.others_in_qty) as others_in_qty, SUM(pb.outer_way_qty) as outer_way_qty,
		SUM(pb.outer_diff_qty) as outer_diff_qty,SUM(pb.sales_out_qty) as sales_out_qty,
		SUM(pb.outer_transfer_out_qty) as outer_transfer_out_qty,
		SUM(pb.inventory_loss_qty) as inventory_loss_qty,
		SUM(pb.others_out_qty) as others_out_qty,
		SUM(pb.during_net_qty) during_net_qty,
		SUM(pb.closing_qty) as closing_qty,
		pb.sharding_flag
	from period_balance pb 
	LEFT JOIN (
		SELECT * FROM item_cost
		WHERE sharding_flag=#{params.shardingFlag} 
			AND company_no = #{params.companyNo} 
			AND `year` = #{params.lastYear} 
			AND `month` = #{params.lastMonth} 
			<if test="null != params.brandNos and '' != params.brandNos">
			AND brand_no in 
		 <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
				#{brandNo}  
		 </foreach>   
		 </if>
	 <if test="null != params.itemNos and '' != params.itemNos">
				AND item_no  in 
			 <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			 </foreach>  
		 </if>
	) i ON pb.company_no = i.company_no AND pb.item_no = i.item_no
	where pb.company_no = #{params.companyNo} AND pb.year=#{params.currentYear} 
       	AND pb.month=#{params.currentMonth} AND pb.sharding_flag = #{params.shardingFlag}
       	<if test="null != params.brandNos and '' != params.brandNos">
       		AND pb.brand_no in 
	       <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
	        	#{brandNo}  
	       </foreach>  
       </if>
 	   <if test="null != params.itemNos and '' != params.itemNos">
       		AND pb.item_no in 
	       <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
	        	#{itemNo}  
	       </foreach>  
       </if>
	group by pb.company_no, pb.year, pb.month, pb.item_no
  </insert>
  
  <select id="selectWeightedCostCount" resultType="java.lang.Integer" parameterType="map" >
	SELECT COUNT(1) FROM
		(SELECT p.company_no,p.item_no,p.year, p.month FROM company_period_balance p 
			WHERE p.company_no = #{params.companyNo} AND p.year = #{params.year} AND p.month = #{params.month} 
			AND p.sharding_flag = #{params.shardingFlag}
			<if test="null != params.brandNos and '' != params.brandNos">
				   AND p.brand_no in 
				<foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
					#{brandNo}  
				</foreach>  
			</if>
			<if test="null != params.itemNos and '' != params.itemNos">
				   AND p.item_no in 
				<foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
						#{itemNo}  
				</foreach>  
			</if>
			   GROUP BY p.item_no) a
  </select>
  
  <select id="selectTheFinalCostByPage" resultMap="BaseResultMap" parameterType="map" >
	SELECT p.sharding_flag,p.id, p.company_no,p.brand_no,p.item_no, p.item_code, p.item_name, p.category_no, p.year, p.month,
	 p.closing_qty, p.closing_balance, p.region_cost
		FROM company_period_balance p
		 WHERE p.company_no = #{params.companyNo} AND p.year = #{params.year} AND p.month = #{params.month} AND p.sharding_flag = #{params.shardingFlag} 
			<if test="null != params.brandNos and '' != params.brandNos">
			  	AND p.brand_no in 
			 <foreach collection="params.brandNos" item="brandNo" separator="," open="(" close=")" index=""> 
			 	#{brandNo}
			 </foreach>  
			</if>
			<if test="null != params.itemNos and '' != params.itemNos">
			   AND p.item_no in 
			   <foreach collection="params.itemNos" item="itemNo" separator="," open="(" close=")" index=""> 
					#{itemNo}  
			   </foreach>  
		   </if>
		   GROUP BY  p.item_no
		   LIMIT #{page.startRowNum} ,#{page.pageSize} 
  </select>
  
</mapper>